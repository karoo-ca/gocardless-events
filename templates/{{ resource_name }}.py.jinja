{%- for resource_name, resource_list in schema.items() -%}
{# just for debugging, this shows the json input
"""
"{{ resource_name }}": [
    {%- for item in resource_list %}
    {
        "action": "{{ item.action }}",
        "description": "{{ item.description.replace("‘", "'") }}",
        "details": [
            {%- for detail in item.details %}
            {
                {%- for key, value in detail.items() %}
                "{{ key }}": "{{ value }}"{% if not loop.last %},{% endif %}
                {%- endfor %}
            }{%- if not loop.last %},{% endif %}
            {%- endfor %}
        ]
    }{% if not loop.last %},{% endif %}
    {%- endfor %}
],
"""
#}
from __future__ import annotations

from typing import Annotated, Any, Literal

from pydantic import AwareDatetime, BaseModel, Field, RootModel

{% macro generate_resource_item_class(resource_item, resource_singular, resource_name, resource_list) %}
class {{ resource_singular }}{{ resource_item.action | to_pascal }}(BaseModel):
    """
    {{ resource_item.description.replace("‘", "'") }}
    """
    id: str
    created_at: AwareDatetime
    resource_type: Literal["{{ resource_name }}"]
    action: Literal["{{ resource_item.action }}"]
    {%- set causes = [] -%} {# Collect unique causes for the current action #}
    {%- for item in resource_list if item.action == resource_item.action %}
        {%- for detail in item.details %}
            {%- if detail.cause not in causes %}
                {%- do causes.append(detail.cause) -%}
            {%- endif %}
        {%- endfor %}
    {%- endfor %}
    {%- if causes|length == 1 %} {# Define the details field based on the number of causes #}
    details: {{ resource_singular }}{{ resource_item.action | to_pascal }}{{ causes[0] | to_pascal }}Detail
    {%- else %}
    details: list[Annotated[
        {%- for cause in causes %}
        {{ resource_singular }}{{ resource_item.action | to_pascal }}{{ cause | to_pascal }}Detail{% if not loop.last %} |{% endif %}
        {%- endfor %},
        Field(..., discriminator="cause")
    ]]
    {%- endif %}
    metadata: dict[str, Any]
    resource_metadata: dict[str, Any]
    links: dict[str, Any]
{% endmacro %}

{% macro generate_detail_classes(resource_list, resource_item, resource_singular) %}
{# Collect all details for the current action, grouped by cause #}
{%- set causes_details = {} -%}
{%- for item in resource_list if item.action == resource_item.action %}
    {%- for detail in item.details %}
        {%- set cause = detail.cause %}
        {%- if causes_details[cause] is defined %}
            {%- do causes_details[cause].append(detail) %}
        {%- else %}
            {%- set causes_details = causes_details.update({cause: [detail]}) or causes_details %}
        {%- endif %}
    {%- endfor %}
{%- endfor %}

{# Generate the detail classes for each cause #}
{%- for cause, details in causes_details.items() %}
class {{ resource_singular }}{{ resource_item.action | to_pascal }}{{ cause | to_pascal }}Detail(BaseModel):
    """
    {{ details[0].description.replace("‘", "'") }}
    """
    {# Collect all unique origins #}
    {%- set origins = details | map(attribute='origin') | list %}
    {%- set unique_origins = origins | unique %}
    {%- set origins_literal = unique_origins | join('", "') %}
    origin: Literal["{{ origins_literal }}"]
    cause: Literal["{{ cause }}"]
    {%- for key in details[0].keys() %} {# Include other fields #}
        {%- if key not in ['origin', 'cause'] %}
    {{ key }}: str
        {%- endif %}
    {%- endfor %}
{%- endfor %}
{% endmacro %}

{% macro generate_types(resource_list, resource_singular) %}
{{ resource_singular }}Type = Annotated[
    {%- for resource_item in resource_list %}
    {{ resource_singular }}{{ resource_item.action | to_pascal }}{% if not loop.last %} |{% endif %}
    {%- endfor %},
    Field(..., discriminator="action")
]

{{ resource_singular }} = RootModel[{{ resource_singular }}Type]
{% endmacro %}

{%- set resource_singular = resource_name.rstrip('s') | to_pascal %}
{%- set actions = resource_list | map(attribute='action') | list %}

{# Generate the resource item classes #}
{%- for resource_item in resource_list %}
{{ generate_resource_item_class(resource_item, resource_singular, resource_name, resource_list) }}
{%- endfor %}

{# Generate the detail classes #}
{%- for resource_item in resource_list %}
{{ generate_detail_classes(resource_list, resource_item, resource_singular) }}
{%- endfor %}

{# Generate the type annotations #}
{{ generate_types(resource_list, resource_singular) }}

{%- endfor %}
